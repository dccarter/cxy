module time

import "time.h" as ctime

##if (defined __ALPINE__) {
    import "bits/alltypes.h" as alltypes
}

macro HTTP_TIME_FMT "%a, %d %b %Y %T GMT";
macro LOG_TIME_FMT  "%Y-%m-%d %H:%M:%S";

#if (defined __ALPINE__) {
    pub type time_t = alltypes.time_t
}
else {
    pub type time_t = ctime.time_t
}

pub struct Time {
    - _t: time_t
    - _tm: ctime.tm

    func `init`(t: time_t) {
        _t = t
        ctime.gmtime_r(ptrof _t, ptrof _tm)
    }

    func `init`() {
        _t = ctime.time(null)
         ctime.gmtime_r(ptrof _t, ptrof _tm)
    }

    func `init`(str: string, fmt: string = HTTP_TIME_FMT!) {
        ctime.strptime(str !: ^const char, fmt !: ^const char, ptrof _tm)
        _t = ctime.timegm(ptrof _tm)
    }

    const func format(fmt: string, os: &OutputStream) {
        if (fmt.[0] != '\0'`char) {
            var buf: [char, 512] = [];
            var sz = ctime.strftime(buf, 512, fmt !: ^const char, ptrof _tm);
            os.append(buf, sz)
        }
    }

    @inline
    const func `str`(os: &OutputStream) {
        format(HTTP_TIME_FMT!, os)
    }

    @inline
    const func timestamp() { return _t }
}