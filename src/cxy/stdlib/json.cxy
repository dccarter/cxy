module json
import "./base64.cxy"
import { Vector } from "./vector.cxy"
import { HashMap } from "./hash.cxy"

macro EOS  '\0'as char

pub func toJSON[T](os: &OutputStream, it: &const T) : void {
    #if (T.isChar) {
        os << <i64>it
    }
    else #if (T.isNumber || T.isBoolean) {
        os << it
    }
    else #if (T.isString) {
        os << '"' << it << '"'
    }
    else #if (T.isOptional) {
        if (it) {
            const value = *it;
            toJSON[#{typeof!(value)}](os, &value)
        }
        else {
            os << "null"
        }
    }
    else #if (T.isStruct) {
        os << "{";
        #const first = true;
        #for (const member: T.members) {
            #if (member.isField) {
                #const M = member.Tinfo;
                #const jsonAttr = member.attributes.["json"];
                #if (first == false) {
                    os << ", "
                }
                os << '"' << #{member.name} << "\": ";
                #if (M.isString && jsonAttr && jsonAttr.["b64"]) {
                    os << '"'
                    base64.encode(os, &it.#{mk_ident!(member.name)})
                    os << '"'
                }
                else {
                    toJSON[#{M}](os, &it.#{mk_ident!(member.name)})
                }
                #{first = false}
            }
        }
        os << "}"
    }
    else #if (T.isTuple) {
        os << "["
        @consistent
        #for (const i: 0..T.membersCount) {
            #if (i != 0) {
                os << ", ";
            }

            var member = it.#{i};
            toJSON(os, &member)
        }
        os << "]"
    }
    else #if (T.isSlice || T.isArray || T.annotations.[:isVector]) {
        os << '[';
        #const M = T.elementType;
        for (const member, i: it) {
            if (i != 0) os << ", "
            toJSON[#{M}](os, &member)
        }
        os << ']'
    }
    else #if (T.isClass && has_member!(#T, "toJSON", #const func(_: &OutputStream) -> void)) {
        it.toJSON(os)
    }
    else {
        // give up here
        error!("type `{t}` is not a JSON-able type", T)
    }
}

exception JSONParserError(msg: String) => (msg != null)? msg.str() : ""
exception JSONError(msg: String) => (msg != null)? msg.str() : ""

pub class JSONParser {
    - data: __string
    - off = 0`u32;
    - line = 1`u32;
    - col = 1`u32;

    func `init`(data: __string) {
        this.data = &&data
    }

    func advance() {
        off++
        col++
        if (data.[off] == '\n'`char) {
            line++
            col = 1
        }
    }

    func skipWhitespace() {
        var p = data.str();
        while (!done() && isSpace!(p.[off]))
            advance()
    }

    @inline
    func consumeChar(c: char) {
        skipWhitespace();
        if (data.[off] == c) {
            advance()
            return true
        }
        return false
    }

    @inline
    func done(): bool { return off >= data.size() }

    func expectString(): !__string {
        skipWhitespace();

        if (data.[off] != '"'`char)
            raise JSONParserError(f"${line}:${col} - expecting a string start token '\"'")

        advance()
        var start = off;
        var p = data.str();
        while (!done() && p.[off] != EOS!) {
            if (p.[off] == '\\'`char && p.[off + 1] == '\"'`char) {
                advance()
                advance()
                continue
            }
            if (p.[off] == '\"'`char)
                break
            advance()
        }
        if (p.[off] != '\"'`char)
            raise JSONParserError(f"${line}:${col} - expecting a '\"' to terminate the string")
        var str = data.substr(start, off-start);
        advance()
        return str
    }

    @inline func expectKey(): !__string {
        return expectString()
    }

    func expectBool(): !bool {
        skipWhitespace()
        var l, c = (line, col);
        var start = off;
        var p = data.str();
        while (!done() && isAlpha!(p.[off]))
           advance()

        var str = data.substr(start, off - start);
        if (str == __string("true"))
            return true
        if (str == __string("false"))
            return false

        raise JSONParserError(f"${l}:${c} - expecting a boolean value (true|false) got '${str}'")
    }

    func expectFloat[T](): !T {
        require!(T.isFloat, "expecting floating point type, got '{t}", #T)
        skipWhitespace()
        var l, c = (line, col);
        var start = off;
        var p = data.str();
        if (p.[off] == '-'`char)
            advance()
        while (!done() && isDigit!(p.[off]))
            advance()

        if (p.[off] == '.'`char) {
            advance()
            while (!done() && isDigit!(p.[off]))
                advance()
        }

        if (p.[off] == 'E'`char || p.[off] == 'e'`char) {
            advance()
            if (!consumeChar('-'))
                consumeChar('+')
            while (!done() && isDigit!(p.[off]))
                advance()
        }

        if (start == off)
            raise JSONParserError(f"${l}:${c} - expecting a number")

        const str = data.substr(start, off - start);
        var ep: ^const char = null;
        var s = str.str() !: ^const char ;
        var num = strtod(s , ptrof ep);
        if ((ep - s) != (off - start))
            raise JSONParserError(f"${l}:${c} - string '${str}' does not form a valid number");
        return <T>num
    }

    func expectInteger[T](): !T {
        require!(T.isInteger, "expecting integer type, got '{t}", #T)
        return expectFloat[f64]() as T
    }

    func peekChar(): char {
        skipWhitespace()
        if (done())
            return EOS!
        return data.[off]
    }

    func expectChar(c: char): !void {
        skipWhitespace()
        if (done() || data.[off] != c)
            raise JSONParserError(f"${line}:${col} - expected character '${c}' not found")
        advance()
    }

    func matchNull(): bool {
        skipWhitespace()
        const end = off + 4;
        if (end > data.size() || data.substr(off, 4) != __string("null"))
            return false
        off = end
        return true
    }

    @inline func tag() => (line, col)

    func expectNull(): !void {
        var l, c = tag()
        if (!matchNull())
            raise JSONParserError(f"${l}:${c} - expected characters, expecting `null`")
    }

    func skipValue(): !void {
        skipWhitespace()
        if (data.[off] == '"'`char) {
            expectString()
        }
        else if(data.[off] == 't'`char || data.[off] == 'f'`char) {
            expectBool()
        }
        else if (data.[off] == 'n'`char) {
            matchNull()
        }
        else if (isDigit!(data.[off])) {
            expectFloat[f64]()
        }
        else if (consumeChar('{')) {
            skipWhitespace()
            while (data.[off] != '}'`char) {
                expectString()
                skipWhitespace()
                expectChar(':')
                skipValue()
                skipWhitespace()
                if (!consumeChar(','))
                    break
                skipWhitespace()
            }
            expectChar('}')
        }
        else if (consumeChar('[')) {
            skipWhitespace()
            while (data.[off] != ']'`char) {
                skipValue()
                skipWhitespace()
                if (!consumeChar(','))
                    break
                skipWhitespace()
            }
            expectChar(']')
        }
    }
}

func fieldFromJSON[T](
    p: &JSONParser,
    pos: (u32, u32),
    obj: &T,
    key: &__string,
    partialAllowed: bool
): !void {
    #for(const member: T.members) {
        #if (member.isField) {
            #const M = member.Tinfo;
            if (__string(#{member.name}) == key) {
                #const jsonAttr = member.attributes.["json"]
                #if (M.isString && jsonAttr && jsonAttr.["b64"]) {
                    require!(M.isClass, "JSON parser supports class string types only")
                    var jstr = p.expectString()
                    var str = String();
                    base64.decode(&str, &jstr)
                    obj.#{mk_ident!(member.name)} = &&str
                }
                else {
                    obj.#{mk_ident!(member.name)} = parseJSON[M](p)
                }
                return
            }
        }
    }

    if (partialAllowed) {
       p.skipValue()
       return
    }

    const typeName = #{T.name};
    raise JSONParserError(f"${pos.0}:${pos.1} - Json key '${key}' does not exist in type '${typeName}'")
}

func parseJSON[T](p: &JSONParser): !T {
    #if (T.isBoolean)
        return p.expectBool()
    else #if (T.isInteger)
        return p.expectInteger[T]()
    else #if (T.isFloat)
        return p.expectFloat[T]()
    else #if (T.isString && T.isClass)
        return String(p.expectString())
    else #if (T.isTuple) {
        var tmp: T = null;
        p.expectChar( '[' )
        #for (const i: 0..T.membersCount) {
            #const M = typeat!(T, i);
            #if (i != 0) {
                p.expectChar(',')
            }
            tmp.#{i} = parseJSON[M](p)
        }
        p.expectChar( ']')
        return &&tmp
    }
    else #if(T.isOptional) {
        if (p.matchNull())
            return None[#{T.targetType}]()
        else
            return Some(parseJSON[#{T.targetType}](p))
    }
    else #if (T.isClass || T.isStruct) {
        #if (has_member!(#T, "fromJSON", #func(p: &JSONParser) -> !void)) {
            var tmp = T();
            tmp.fromJSON(p)
            return &&tmp
        }
        else #if (T.isStruct && T.attributes.["json"]) {
            #const attrs = T.attributes.["json"];
            #const pa = attrs.["partial"];
            var tmp = T{};
            p.expectChar('{')

            while (p.peekChar() != '}'`char) {
                var pos = p.tag();
                var key = p.expectKey();
                p.expectChar(':')
                #if (pa)
                    fieldFromJSON(p, pos, &tmp, &key, true)
                else
                    fieldFromJSON(p, pos, &tmp, &key, false)
                p.consumeChar(',')
            }
            p.expectChar('}')
            return &&tmp
        }
        else #if (T.annotations.[:isVector]) {
            var tmp = T();
            p.expectChar( '[' )
            while(p.peekChar() != ']') {
                if (tmp.size() != 0) {
                    p.expectChar(',')
                }
                tmp.push(parseJSON[T.ElementType](p))
            }
            p.expectChar( ']')
            return &&tmp
        }
        else {
            error!(
                "type `{t}` cannot be implicitly parsed from json, implement `{t}::fromJSON(p: &JSONParser)",
                #T, #T)
        }
    }
}

@inline
pub func parse[T](p: &JSONParser): !T => parseJSON[T](p)

@inline
pub func fromString[T](s: &const String): !T {
    var p = JSONParser(s.__str());
    return parse[T](&p)
}

pub enum Tag {
    @str("Unknown")
    Unknown,
    @str("Null")
    Null,
    @str("Boolean")
    Boolean,
    @str("Number")
    Number,
    @str("String")
    String,
    @str("Array")
    Array,
    @str("Object")
    Object
}

pub class Value {
    - tag: Tag
    func `init`(tag: Tag = .Null) {
        this.tag = tag
    }

    @inline
    const func isNull() => tag == .Null

    @inline
    const func isBoolean() => tag == .Boolean

    @inline
    const func isNumber() => tag == .Number

    @inline
    const func isString() => tag == .String

    @inline
    const func isArray() => tag == .Array

    @inline
    const func isObject() => tag == .Object

    virtual func fromJSON(p: &JSONParser): !void {
        p.expectNull()
    }

    virtual const func toJSON(os: &OutputStream): void {
        os << "null"
    }

    const func `==`(other: &Value) => (this !: ^const void) == (other !: ^const void)

    const func `!!`() => this.tag != .Null

    const func `str`(os: &OutputStream) {
        toJSON(os)
    }
}

class JSONString: Value {
    value: String

    func `init`(s: String = null) {
        super(Tag.String)
        value = &&s
    }

    func fromJSON(p: &JSONParser): !void {
        var s = p.expectString()
        if (!s.empty())
            value = String(s)
    }

    const func toJSON(os: &OutputStream): void {
        module.toJSON(os, &value)
    }
}

class Number: Value {
    value: f64
    func `init`(value: f64 = 0) {
        super(Tag.Number)
        this.value = value
    }

    func `init`(value: i64 = 0) {
        super(Tag.Number)
        this.value = value
    }

    func fromJSON(p: &JSONParser): !void {
        value = p.expectFloat[f64]()
    }

    const func toJSON(os: &OutputStream): void {
        module.toJSON(os, value)
    }
}

class Boolean: Value {
    value: bool
    func `init`(value: bool = false) {
        super(Tag.Boolean)
        this.value = value
    }

    func fromJSON(p: &JSONParser): !void {
        value = p.expectBool()
    }

    const func toJSON(os: &OutputStream): void {
        module.toJSON(os, value)
    }
}

class Array: Value {
    - elems = Vector[Value]()
    func `init`() {
        super(Tag.Array)
    }

    @inline
    const func `..`() => elems.op__range()

    @inline
    func `[]`(idx: i32) => elems.[idx]
    @inline
    func `[]=`(idx: i32, value: Value) { elems.[idx] = &&value }

    const func toJSON(os: &OutputStream) {
        os << "["
        for (const value, i: elems) {
            if (i != 0)
                os << ", "
            value.toJSON(os)
        }
        os << "]"
    }

    func fromJSON(p: &JSONParser): !void {
        p.expectChar('['`char)
        while (p.peekChar() != ']'`char) {
            if (!elems.empty())
                p.expectChar(','`char)
            var value: Value = null;
            switch(p.peekChar()) {
                case 'n'`char => value = Value()
                case 'f'`char, 't'`char => value = Boolean()
                case '0'`char..'9'`char => value = Number()
                case '"'`char => value = JSONString()
                case '['`char => value = This()
                case '{'`char => value = createObject()
                default => raise JSONParserError("")
            }
            value.fromJSON(p)
            elems.push(&&value)
        }
        p.expectChar(']'`char)
    }
}

class Object: Value {
    - members = HashMap[String, Value]()
    func `init`() {
        super(Tag.Object)
    }

    @inline
    const func `..`() => members.op__range()
    @inline
    func `[]`(name: String) => members.[&&name]
    @inline
    const func `[]`(name: String) => members.[&&name]
    @inline
    func `[]=`(name: String, value: Value) => members.[&&name] = &&value

    func set[T](name: String, value: T) {
        #if (T.isBoolean)
            members.[&&name] = Boolean(value)
        else #if (T.isChar || T.isNumber)
            members.[&&name] = Number(value)
        else #if (T.isString)
            members.[&&name] = JSONString(value)
        else {
            members.[&&name] = &&value
        }
    }

    func fromJSON(p: &JSONParser): !void {
        p.expectChar('{'`char)
        while (p.peekChar() != '}'`char) {
            if (!members.empty())
                p.expectChar(','`char)
            var name = p.expectKey();
            p.expectChar(':'`char)

            var value: Value = null;
            switch(p.peekChar()) {
                case 'n'`char => value = Value()
                case 'f'`char, 't'`char => value = Boolean()
                case '-'`char =>
                case '0'`char..'9'`char => value = Number()
                case '"'`char => value = JSONString()
                case '['`char => value = Array()
                case '{'`char => value = This()
                default => raise JSONParserError(f"Unexpected character: ${p.peekChar()}")
            }
            value.fromJSON(p)
            members.[String(name)] = &&value
        }
        p.expectChar('}'`char)
    }

    const func toJSON(os: &OutputStream): void {
        os << "{"
        var first = true;
        for (const name, value: members) {
            if (!first)
                os << ", "
            os << '"' << name << "\": "
            value.toJSON(os)
            first = false
        }
        os << "}"
    }
}

func createObject(): Value{ return Object() }

macro jsonRequireTag(value, kind) {
    if (value!.tag != kind!)
        raise JSONError(f"Expecting a '${kind!}' Value, got a '${value!.tag}'")
}

struct ShellObject {
    - value: Value = null
    func `init`() {}

    func fromJSON(p: &JSONParser): !void {
        if (p.peekChar() == EOS!)
            raise JSONParserError("End of Stream")
        switch(p.peekChar()) {
            case 'n'`char => value = Value()
            case 'f'`char, 't'`char => value = Boolean()
            case '0'`char..'9'`char => value = Number()
            case '"'`char => value = JSONString()
            case '['`char => value = Array()
            case '{'`char => value = Object()
            default => raise JSONParserError("")
        }
        value.fromJSON(p)
    }

    const func toJSON(os: &OutputStream): void {
        if (value != null)
            value.toJSON(os)
        else
            os << "\"null\""
    }

    const func `!!`() => value != null

    const func `&.`() {
        assert!(value != null)
        return &value
    }

    const func `deref`() {
        assert!(value != null)
        return &value
    }
}

pub func cast[Target](src: &const Value): !Target {
    #if (#Target == #Value) {
        return <Target>src
    }
    else #if (#Target == #bool) {
        jsonRequireTag!(src, Tag.Boolean)
        return (<&const Boolean> src).value
    }
    else #if (Target.isNumber) {
        jsonRequireTag!(src, Tag.Number)
        return <Target>(<&const Number>src).value
    }
    else #if (Target.isString && Target.isClass) {
        jsonRequireTag!(src, Tag.String)
        return (<&const JSONString>src).value
    }
    else #if (Target.isOptional) {
        #const M = Target.targetType;
        if (src.tag == .Null)
            return None[M]()
        else
            return Some(cast[M](src))
    }
    else #if (Target.isStruct || Target.isClass) {
        jsonRequireTag!(src, Tag.Object)
        var value = Target();
        const obj = <&const Object>src;
        #for (const member: Target.members) {
            #if (member.isField) {{
                #const M = member.Tinfo;
                #const jsonAttr = member.attributes.["json"]
                const val = obj.[#{member.name}];
                #if (jsonAttr && jsonAttr.["optional"]) {
                    if (val) {
                        value.#{mk_ident!(member.name)} = cast[M](*val)
                    }
                }
                else {
                    #if (!M.isOptional) {
                        if (!val) {
                            var msg = String("Any.cast failed, missing required member ");
                            msg << #{member.name}
                            raise JSONParserError(&&msg)
                        }
                        value.#{mk_ident!(member.name)} = cast[M](*val)
                    }
                    else {
                        if (val)
                            value.#{mk_ident!(member.name)} = cast[M](*val)
                    }
                }
            }}
        }
        return &&value
    }
    else {
        error!("Unsupported cast target type '{t}'", #Target)
    }
}

func toJSONValue[T](value: &const T): Value {
    #if (#T == #bool) {
        return Boolean(value)
    }
    else #if (T.isNumber) {
        return Number(value)
    }
    else #if (T.isString) {
        return JSONString(value)
    }
    else #if (T.isOptional) {
        if (!value) {
            return Value()
        }
        else {
            return toJSONValue(*value)
        }
    }
    else #if (T.isClass || T.isStruct) {
        var obj = Object();
        #for (const member: T.members) {
            #if (member.isField) {{
                #const M = member.Tinfo;
                #const jsonAttr = member.attributes.["json"]
                #if (!jsonAttr || !jsonAttr.["ignore"]) {
                    const val = value.#{member.name};
                    #if (jsonAttr && jsonAttr.["optional"]) {
                        #if (M.isClass) {
                            if (val != null) {
                                obj.[#{member.name}] = toJSONValue(&val)
                            }
                        }
                        else #if (M.isOptional) {
                            if (!!val) {
                                obj.[#{member.name}] = toJSONValue(&val)
                            }
                        }
                        else {
                            obj.[#{member.name}] = toJSONValue(&val)
                        }
                    }
                    else {
                        obj.[#{member.name}] = toJSONValue(&val)
                    }
                }
            }}
        }
        return &&obj
    }
    else {
        error!("Unsupported cast target type '{t}'", #T)
    }
}

test "Json encode" {
    var s = String();
    toJSON(&s, 10`i32)
    ok!(s == "10")

    s.clear()
    toJSON(&s, &{a: 10, b: true, c: "world", d: 'c'})
    ok!(s == "{\"a\": 10, \"b\": true, \"c\": \"world\", \"d\": 99}")

    s.clear()
    toJSON(&s, &(10`u32, true, "World"))
    ok!(s == "[10, true, \"World\"]")

    s.clear()
    toJSON(&s, &[10`u32, 20, 30])
    ok!(s == "[10, 20, 30]")

    var x:i32? = 100;
    s.clear()
    toJSON(&s, &x)
    ok!(s == "100")

    x = null
    s.clear()
    toJSON(&s, &x)
    ok!(s == "null")

    var z = Vector[i32]();
    z.push(10)
    z.push(20)
    s.clear()
    toJSON(&s, &z)
    ok!(s == "[10, 20]")
}
